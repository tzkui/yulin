// vite.config.js
import { defineConfig } from "file:///E:/working/%E6%A6%86%E6%9E%97%E5%B8%82%E5%BA%94%E6%80%A5%E6%8C%87%E6%8C%A5%E5%B9%B3%E5%8F%B0/code/node_modules/vite/dist/node/index.js";
import vue from "file:///E:/working/%E6%A6%86%E6%9E%97%E5%B8%82%E5%BA%94%E6%80%A5%E6%8C%87%E6%8C%A5%E5%B9%B3%E5%8F%B0/code/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import path from "path";
import copy from "file:///E:/working/%E6%A6%86%E6%9E%97%E5%B8%82%E5%BA%94%E6%80%A5%E6%8C%87%E6%8C%A5%E5%B9%B3%E5%8F%B0/code/node_modules/rollup-plugin-copy/dist/index.commonjs.js";
var __vite_injected_original_dirname = "E:\\working\\\u6986\u6797\u5E02\u5E94\u6025\u6307\u6325\u5E73\u53F0\\code";
var vite_config_default = defineConfig({
  plugins: [
    vue(),
    copy({
      targets: [
        { src: "src/assets/*", dest: "dist/assets/" }
        // { src: "src/lib/*", dest: "dist/lib/" },
      ],
      hook: "writeBundle",
      verbose: true,
      flatten: true
    })
  ],
  resolve: {
    alias: [
      //配置别名
      { find: "@", replacement: path.resolve(__vite_injected_original_dirname, "src") }
    ]
  },
  build: {
    terserOptions: {
      compress: {
        drop_console: true,
        //打包删除console
        drop_debugger: true
        //打包删除调试信息
      }
    }
  },
  server: {
    host: "0.0.0.0",
    https: false,
    //是否启用 http 2
    cors: true,
    //为开发服务器配置 CORS , 默认启用并允许任何源
    open: false,
    //服务启动时自动在浏览器中打开应用
    port: "8007",
    watch: {
      ignored: ["!**/node_modules/your-package-name/**"]
    },
    // 反向代理配置
    proxy: {
      "/api": {
        target: "http://222.212.82.225:20128",
        changeOrigin: true,
        rewrite: (path2) => path2.replace(/^\/api/, "")
      },
      "/newApi": {
        target: "http://192.168.3.200:9007",
        changeOrigin: true
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOlxcXFx3b3JraW5nXFxcXFx1Njk4Nlx1Njc5N1x1NUUwMlx1NUU5NFx1NjAyNVx1NjMwN1x1NjMyNVx1NUU3M1x1NTNGMFxcXFxjb2RlXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFx3b3JraW5nXFxcXFx1Njk4Nlx1Njc5N1x1NUUwMlx1NUU5NFx1NjAyNVx1NjMwN1x1NjMyNVx1NUU3M1x1NTNGMFxcXFxjb2RlXFxcXHZpdGUuY29uZmlnLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9FOi93b3JraW5nLyVFNiVBNiU4NiVFNiU5RSU5NyVFNSVCOCU4MiVFNSVCQSU5NCVFNiU4MCVBNSVFNiU4QyU4NyVFNiU4QyVBNSVFNSVCOSVCMyVFNSU4RiVCMC9jb2RlL3ZpdGUuY29uZmlnLmpzXCI7LypcclxuICogQEF1dGhvcjogZW1tYVxyXG4gKiBARGF0ZTogMjAyMy0wNi0wMiAxNTowNDoyN1xyXG4gKiBATGFzdEVkaXRvcnM6IGVtbWFcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wNi0wNSAxNTowNzowNlxyXG4gKiBARGVzY3JpcHRpb246IFxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjMgYnkgJHtnaXRfbmFtZV9lbWFpbH0sIEFsbCBSaWdodHMgUmVzZXJ2ZWQuIFxyXG4gKi9cclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSdcclxuaW1wb3J0IHZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnXHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXHJcbmltcG9ydCBjb3B5IGZyb20gJ3JvbGx1cC1wbHVnaW4tY29weScgLy9cdTVGMTVcdTUxNjVcdTYzRDJcdTRFRjZcclxuXHJcbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgcGx1Z2luczogW1xyXG4gICAgdnVlKCksXHJcbiAgICBjb3B5KHtcclxuICAgICAgdGFyZ2V0czpbXHJcbiAgICAgICAgeyBzcmM6IFwic3JjL2Fzc2V0cy8qXCIsIGRlc3Q6IFwiZGlzdC9hc3NldHMvXCIgfSxcclxuICAgICAgICAvLyB7IHNyYzogXCJzcmMvbGliLypcIiwgZGVzdDogXCJkaXN0L2xpYi9cIiB9LFxyXG4gICAgICBdLFxyXG4gICAgICBob29rOlwid3JpdGVCdW5kbGVcIixcclxuICAgICAgdmVyYm9zZTp0cnVlLFxyXG4gICAgICBmbGF0dGVuOnRydWVcclxuICAgIH0pXHJcbiAgXSxcclxuXHJcbiAgcmVzb2x2ZToge1xyXG4gICAgYWxpYXM6IFsvL1x1OTE0RFx1N0Y2RVx1NTIyQlx1NTQwRFxyXG4gICAgICB7IGZpbmQ6ICdAJywgcmVwbGFjZW1lbnQ6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdzcmMnKSB9XHJcbiAgICBdLFxyXG4gIH0sXHJcblxyXG4gIGJ1aWxkOiB7XHJcbiAgICB0ZXJzZXJPcHRpb25zOiB7XHJcbiAgICAgIGNvbXByZXNzOiB7XHJcbiAgICAgICAgZHJvcF9jb25zb2xlOiB0cnVlLC8vXHU2MjUzXHU1MzA1XHU1MjIwXHU5NjY0Y29uc29sZVxyXG4gICAgICAgIGRyb3BfZGVidWdnZXI6IHRydWUsLy9cdTYyNTNcdTUzMDVcdTUyMjBcdTk2NjRcdThDMDNcdThCRDVcdTRGRTFcdTYwNkZcclxuICAgICAgfVxyXG4gICAgfSxcclxuICB9LFxyXG5cclxuICBzZXJ2ZXI6IHtcclxuICAgIGhvc3Q6IFwiMC4wLjAuMFwiLFxyXG4gICAgaHR0cHM6IGZhbHNlLC8vXHU2NjJGXHU1NDI2XHU1NDJGXHU3NTI4IGh0dHAgMlxyXG4gICAgY29yczogdHJ1ZSwvL1x1NEUzQVx1NUYwMFx1NTNEMVx1NjcwRFx1NTJBMVx1NTY2OFx1OTE0RFx1N0Y2RSBDT1JTICwgXHU5RUQ4XHU4QkE0XHU1NDJGXHU3NTI4XHU1RTc2XHU1MTQxXHU4QkI4XHU0RUZCXHU0RjU1XHU2RTkwXHJcbiAgICBvcGVuOiBmYWxzZSwvL1x1NjcwRFx1NTJBMVx1NTQyRlx1NTJBOFx1NjVGNlx1ODFFQVx1NTJBOFx1NTcyOFx1NkQ0Rlx1ODlDOFx1NTY2OFx1NEUyRFx1NjI1M1x1NUYwMFx1NUU5NFx1NzUyOFxyXG4gICAgcG9ydDogXCI4MDA3XCIsXHJcbiAgICB3YXRjaDoge1xyXG4gICAgICBpZ25vcmVkOiBbXCIhKiovbm9kZV9tb2R1bGVzL3lvdXItcGFja2FnZS1uYW1lLyoqXCJdXHJcbiAgICB9LFxyXG4gICAgLy8gXHU1M0NEXHU1NDExXHU0RUUzXHU3NDA2XHU5MTREXHU3RjZFXHJcbiAgICBwcm94eToge1xyXG4gICAgICAnL2FwaSc6IHtcclxuICAgICAgICB0YXJnZXQ6IFwiaHR0cDovLzIyMi4yMTIuODIuMjI1OjIwMTI4XCIsXHJcbiAgICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxyXG4gICAgICAgIHJld3JpdGU6IChwYXRoKSA9PiBwYXRoLnJlcGxhY2UoL15cXC9hcGkvLCAnJylcclxuICAgICAgfSxcclxuICAgICAgJy9uZXdBcGknOiB7XHJcbiAgICAgICAgdGFyZ2V0OiBcImh0dHA6Ly8xOTIuMTY4LjMuMjAwOjkwMDdcIixcclxuICAgICAgICBjaGFuZ2VPcmlnaW46IHRydWUsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn0pXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFRQSxTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFNBQVM7QUFDaEIsT0FBTyxVQUFVO0FBQ2pCLE9BQU8sVUFBVTtBQVhqQixJQUFNLG1DQUFtQztBQWN6QyxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixTQUFTO0FBQUEsSUFDUCxJQUFJO0FBQUEsSUFDSixLQUFLO0FBQUEsTUFDSCxTQUFRO0FBQUEsUUFDTixFQUFFLEtBQUssZ0JBQWdCLE1BQU0sZUFBZTtBQUFBO0FBQUEsTUFFOUM7QUFBQSxNQUNBLE1BQUs7QUFBQSxNQUNMLFNBQVE7QUFBQSxNQUNSLFNBQVE7QUFBQSxJQUNWLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxTQUFTO0FBQUEsSUFDUCxPQUFPO0FBQUE7QUFBQSxNQUNMLEVBQUUsTUFBTSxLQUFLLGFBQWEsS0FBSyxRQUFRLGtDQUFXLEtBQUssRUFBRTtBQUFBLElBQzNEO0FBQUEsRUFDRjtBQUFBLEVBRUEsT0FBTztBQUFBLElBQ0wsZUFBZTtBQUFBLE1BQ2IsVUFBVTtBQUFBLFFBQ1IsY0FBYztBQUFBO0FBQUEsUUFDZCxlQUFlO0FBQUE7QUFBQSxNQUNqQjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFFQSxRQUFRO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixPQUFPO0FBQUE7QUFBQSxJQUNQLE1BQU07QUFBQTtBQUFBLElBQ04sTUFBTTtBQUFBO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixPQUFPO0FBQUEsTUFDTCxTQUFTLENBQUMsdUNBQXVDO0FBQUEsSUFDbkQ7QUFBQTtBQUFBLElBRUEsT0FBTztBQUFBLE1BQ0wsUUFBUTtBQUFBLFFBQ04sUUFBUTtBQUFBLFFBQ1IsY0FBYztBQUFBLFFBQ2QsU0FBUyxDQUFDQSxVQUFTQSxNQUFLLFFBQVEsVUFBVSxFQUFFO0FBQUEsTUFDOUM7QUFBQSxNQUNBLFdBQVc7QUFBQSxRQUNULFFBQVE7QUFBQSxRQUNSLGNBQWM7QUFBQSxNQUNoQjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFsicGF0aCJdCn0K
